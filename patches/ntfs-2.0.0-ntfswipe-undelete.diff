diff -uaN ../ntfsprogs-2.0.0/configure.ac ./configure.ac
--- ../ntfsprogs-2.0.0/configure.ac	2007-10-07 13:12:04.000000000 +0200
+++ ./configure.ac	2007-10-11 18:41:18.000000000 +0200
@@ -357,7 +357,7 @@
 	endian.h byteswap.h sys/byteorder.h sys/endian.h sys/param.h \
 	sys/ioctl.h sys/mount.h sys/stat.h sys/types.h sys/vfs.h \
 	sys/statvfs.h sys/sysmacros.h linux/major.h linux/fd.h linux/hdreg.h \
-	machine/endian.h windows.h syslog.h pwd.h sys/cdefs.h])
+	machine/endian.h windows.h syslog.h pwd.h sys/cdefs.h malloc.h])

 # Checks for typedefs, structures, and compiler characteristics.
 AC_HEADER_STDBOOL
@@ -383,7 +383,8 @@
 AC_FUNC_VPRINTF
 AC_CHECK_FUNCS([atexit basename dup2 fdatasync getopt_long hasmntopt mbsinit \
 	memmove memset realpath regcomp setlocale setxattr strcasecmp strchr \
-	strdup strerror strnlen strtol strtoul sysconf utime])
+	strdup strerror strnlen strtol strtoul sysconf utime memcpy random   \
+	snprintf])

 # Makefiles to be created by configure.
 AC_CONFIG_FILES([
diff -uaN ../ntfsprogs-2.0.0/ntfsprogs/ntfswipe.c ./ntfsprogs/ntfswipe.c
--- ../ntfsprogs-2.0.0/ntfsprogs/ntfswipe.c	2007-10-11 18:09:40.000000000 +0200
+++ ./ntfsprogs/ntfswipe.c	2007-10-11 19:18:04.000000000 +0200
@@ -46,6 +46,11 @@
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
+#ifdef HAVE_MALLOC_H
+#include <malloc.h>
+#else
+#include <stdlib.h>
+#endif

 #include "ntfswipe.h"
 #include "ntfs_types.h"
@@ -56,9 +61,78 @@
 #include "ntfs_mst.h"
 #include "ntfs_version.h"
 #include "ntfs_logging.h"
+#include "ntfs_list.h"
+#include "ntfs_mft.h"

 static const char *EXEC_NAME = "ntfswipe";
 static struct options opts;
+static unsigned long int npasses = 25;
+
+struct filename
+{
+	char		*parent_name;
+	struct ntfs_list_head list;		/* Previous/Next links */
+	ntfschar	*uname;		/* Filename in unicode */
+	int		 uname_len;	/* and its length */
+	long long	 size_alloc;	/* Allocated size (multiple of cluster size) */
+	long long	 size_data;	/* Actual size of data */
+	long long	 parent_mref;
+	NTFS_FILE_ATTR_FLAGS	 flags;
+	time_t		 date_c;	/* Time created */
+	time_t		 date_a;	/*	altered */
+	time_t		 date_m;	/*	mft record changed */
+	time_t		 date_r;	/*	read */
+	char		*name;		/* Filename in current locale */
+	NTFS_FILE_NAME_TYPE_FLAGS name_space;
+	char		 padding[7];	/* Unused: padding to 64 bit. */
+};
+
+struct data
+{
+	struct ntfs_list_head list;		/* Previous/Next links */
+	char		*name;		/* Stream name in current locale */
+	ntfschar	*uname;		/* Unicode stream name */
+	int		 uname_len;	/* and its length */
+	int		 resident;	/* Stream is resident */
+	int		 compressed;	/* Stream is compressed */
+	int		 encrypted;	/* Stream is encrypted */
+	long long	 size_alloc;	/* Allocated size (multiple of cluster size) */
+	long long	 size_data;	/* Actual size of data */
+	long long	 size_init;	/* Initialised size, may be less than data size */
+	long long	 size_vcn;	/* Highest VCN in the data runs */
+	ntfs_runlist_element *runlist;	/* Decoded data runs */
+	int		 percent;	/* Amount potentially recoverable */
+	void		*data;		/* If resident, a pointer to the data */
+	char		 padding[4];	/* Unused: padding to 64 bit. */
+};
+
+struct ufile
+{
+	long long	 inode;		/* MFT record number */
+	time_t		 date;		/* Last modification date/time */
+	struct ntfs_list_head name;		/* A list of filenames */
+	struct ntfs_list_head data;		/* A list of data streams */
+	char		*pref_name;	/* Preferred filename */
+	char		*pref_pname;	/*	     parent filename */
+	long long	 max_size;	/* Largest size we find */
+	int		 attr_list;	/* MFT record may be one of many */
+	int		 directory;	/* MFT record represents a directory */
+	NTFS_MFT_RECORD	*mft;		/* Raw MFT record */
+	char		 padding[4];	/* Unused: padding to 64 bit. */
+};
+
+#define NPAT 22
+
+/* Taken from `shred' source */
+static unsigned const int patterns[NPAT] =
+{
+	0x000, 0xFFF,					/* 1-bit */
+	0x555, 0xAAA,					/* 2-bit */
+	0x249, 0x492, 0x6DB, 0x924, 0xB6D, 0xDB6,	/* 3-bit */
+	0x111, 0x222, 0x333, 0x444, 0x666, 0x777,
+	0x888, 0x999, 0xBBB, 0xCCC, 0xDDD, 0xEEE	/* 4-bit */
+};
+

 /**
  * version - Print version information about the program
@@ -95,6 +169,7 @@
 		"    -p       --pagefile    Wipe pagefile (swap space)\n"
 		"    -t       --tails       Wipe file tails\n"
 		"    -u       --unused      Wipe unused clusters\n"
+		"    -s       --undel       Wipe undelete data\n"
 		"\n"
 		"    -a       --all         Wipe all unused space\n"
 		"\n"
@@ -187,7 +262,7 @@
  */
 static int parse_options(int argc, char *argv[])
 {
-	static const char *sopt = "-ab:c:dfh?ilmnpqtuvV";
+	static const char *sopt = "-ab:c:dfh?ilmnpqtuvVs";
 	static struct option lopt[] = {
 		{ "all",	no_argument,		NULL, 'a' },
 		{ "bytes",	required_argument,	NULL, 'b' },
@@ -204,6 +279,7 @@
 		{ "quiet",	no_argument,		NULL, 'q' },
 		{ "tails",	no_argument,		NULL, 't' },
 		{ "unused",	no_argument,		NULL, 'u' },
+		{ "undel",	no_argument,		NULL, 's' },
 		{ "verbose",	no_argument,		NULL, 'v' },
 		{ "version",	no_argument,		NULL, 'V' },
 		{ NULL,		0,			NULL, 0   }
@@ -240,6 +316,7 @@
 			opts.pagefile++;
 			opts.tails++;
 			opts.unused++;
+			opts.undel++;
 			break;
 		case 'b':
 			if (!opts.bytes) {
@@ -290,6 +367,9 @@
 			opts.quiet++;
 			ntfs_log_clear_levels(NTFS_LOG_LEVEL_QUIET);
 			break;
+		case 's':
+			opts.undel++;
+			break;
 		case 't':
 			opts.tails++;
 			break;
@@ -360,7 +440,7 @@
 		}

 		if (!opts.directory && !opts.logfile && !opts.mft &&
-		    !opts.pagefile && !opts.tails && !opts.unused) {
+		    !opts.pagefile && !opts.tails && !opts.unused && !opts.undel) {
 			opts.info = 1;
 		}
 	}
@@ -1322,6 +1402,532 @@
 }

 /**
+ * Part of ntfsprogs.
+ * Modified: removed logging, signal handling, removed data.
+ *
+ * free_file - Release the resources used by a file object
+ * \param file  The unwanted file object
+ *
+ * This will free up the memory used by a file object and iterate through the
+ * object's children, freeing their resources too.
+ *
+ * \return  none
+ */
+static void free_file (struct ufile *file)
+{
+	struct ntfs_list_head *item = NULL, *tmp = NULL;
+	struct filename *f = NULL;
+	struct data *d = NULL;
+
+	if ( file == NULL )
+		return;
+
+	ntfs_list_for_each_safe (item, tmp, &(file->name))
+	{ /* List of filenames */
+
+		f = ntfs_list_entry (item, struct filename, list);
+		if (f->name != NULL)
+			free (f->name);
+		if (f->parent_name != NULL) {
+			free (f->parent_name);
+		}
+		free (f);
+	}
+
+	ntfs_list_for_each_safe (item, tmp, &(file->data))
+	{ /* List of data streams */
+
+		d = ntfs_list_entry (item, struct data, list);
+		if (d->name != NULL)
+			free (d->name);
+		if (d->runlist != NULL)
+			free (d->runlist);
+		free (d);
+	}
+
+
+	free (file->mft);
+	free (file);
+}
+
+/**
+ * Fills the given buffer with one of predefined patterns.
+ * \param pat_no Pass number.
+ * \param buffer Buffer to be filled.
+ * \param buflen Length of the buffer.
+ */
+void fill_buffer (
+		unsigned long int 		pat_no,
+		unsigned char * const 		buffer,
+		const size_t 			buflen,
+		int * const			selected )
+		/*@requires notnull buffer @*/ /*@sets *buffer @*/
+{
+
+	size_t i;
+#if (!defined HAVE_MEMCPY) && (!defined HAVE_STRING_H)
+	size_t j;
+#endif
+	unsigned int bits;
+
+	if ( (buffer == NULL) || (buflen == 0) ) return;
+
+	/* De-select all patterns once every npasses calls. */
+	if ( pat_no % npasses == 0 )
+	{
+		for ( i = 0; i < NPAT; i++ ) { selected[i] = 0; }
+        }
+        pat_no %= npasses;
+
+	/* The first, last and middle passess will be using a random pattern *
+	if ( (pat_no == 0) || (pat_no == npasses-1) || (pat_no == npasses/2) )
+	{
+#if (!defined __STRICT_ANSI__) && (defined HAVE_RANDOM)
+		bits = (unsigned int) (random () & 0xFFF);
+#else
+		bits = (unsigned int) (rand () & 0xFFF);
+#endif
+	}
+	else
+	{*/
+		/* For other passes, one of the fixed patterns is selected. */
+		do
+		{
+#if (!defined __STRICT_ANSI__) && (defined HAVE_RANDOM)
+			i = (size_t) (random () % NPAT);
+#else
+			i = (size_t) (rand () % NPAT);
+#endif
+		}
+		while ( selected[i] == 1 );
+		bits = 	opts.bytes[i];
+		selected[i] = 1;
+    	/*}*/
+
+	/* Taken from `shred' source and modified *
+	bits |= bits << 12;
+	buffer[0] = (unsigned char) ((bits >> 4) & 0xFF);
+	buffer[1] = (unsigned char) ((bits >> 8) & 0xFF);
+	buffer[2] = (unsigned char) (bits & 0xFF);
+	*/
+	buffer[0] = (unsigned char) bits;
+	buffer[1] = (unsigned char) bits;
+	buffer[2] = (unsigned char) bits;
+	for (i = 3; i < buflen / 2; i *= 2)
+	{
+#ifdef HAVE_MEMCPY
+		memcpy (buffer + i, buffer, i);
+#elif defined HAVE_STRING_H
+		strncpy ((char *) (buffer + i), (char *)buffer, i);
+#else
+		for ( j=0; j < i; j++ )
+		{
+			buffer [ i + j ] = buffer[j];
+		}
+#endif
+	}
+	if (i < buflen)
+	{
+#ifdef HAVE_MEMCPY
+		memcpy (buffer + i, buffer, buflen - i);
+#elif defined HAVE_STRING_H
+		strncpy ((char *) (buffer + i), (char *) buffer, buflen - i);
+#else
+		for ( j=0; j<buflen - i; j++ )
+		{
+			buffer [ i + j ] = buffer[j];
+		}
+#endif
+	}
+}
+
+/**
+ * Destroys the specified record's filenames and data.
+ *
+ * \param nv The filesystem.
+ * \param record The record (i-node number), which filenames & data to destroy.
+ * \return 0 in case of no errors, other values otherwise.
+ */
+static int destroy_record (ntfs_volume *nv, const s64 record, unsigned char * const buf)
+{
+	struct ufile *file = NULL;
+	ntfs_runlist_element *rl = NULL;
+	ntfs_attr *mft = NULL;
+
+	ntfs_attr_search_ctx *ctx = NULL;
+	int ret_wfs = 0;
+	unsigned long int pass, i;
+	s64 j;
+	u32 a_offset;
+	int selected[NPAT];
+
+	file = (struct ufile *) malloc (sizeof (struct ufile));
+	if (file==NULL)
+	{
+		return -1;
+	}
+
+	NTFS_INIT_LIST_HEAD (&(file->name));
+	NTFS_INIT_LIST_HEAD (&(file->data));
+	file->inode = record;
+
+	file->mft = malloc (nv->mft_record_size);
+	if (file->mft == NULL)
+	{
+		free_file (file);
+		return -1;
+	}
+
+	mft = ntfs_attr_open (nv->mft_ni, NTFS_AT_DATA, NTFS_AT_UNNAMED, 0);
+	if (mft == NULL)
+	{
+		free_file (file);
+		return -2;
+	}
+
+	/* Read the MFT reocrd of the i-node */
+	if (ntfs_attr_mst_pread (mft, nv->mft_record_size * record, 1LL,
+		nv->mft_record_size, file->mft) < 1)
+	{
+
+		ntfs_attr_close (mft);
+		free_file (file);
+		return -3;
+	}
+	ntfs_attr_close (mft);
+	mft = NULL;
+
+	ctx = ntfs_attr_get_search_ctx (NULL, file->mft);
+	if (ctx == NULL)
+	{
+		free_file (file);
+		return -4;
+	}
+
+	/* Wiping file names */
+	while ( 1 == 1 )
+	{
+
+        	if (ntfs_attr_lookup (NTFS_AT_FILE_NAME, NULL, 0, 0, 0LL, NULL, 0, ctx) != 0)
+        	{
+			break;	/* None / no more of that type */
+		}
+		if ( ctx->attr == NULL ) break;
+
+		/* We know this will always be resident.
+		   Find the offset of the data, including the MFT record. */
+		a_offset = ((u32) ctx->attr + le16_to_cpu (ctx->attr->value_offset) );
+
+		for ( pass = 0; pass < npasses; pass++ )
+		{
+
+			fill_buffer ( pass, (unsigned char *) a_offset, ctx->attr->value_length,
+				selected );
+
+			if ( !opts.noaction ) {
+				if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+						1LL, ctx->mrec) != 0 )
+				{
+					ret_wfs = -5;
+					break;
+				}
+				/* Flush after each writing, if more than 1 overwriting needs to be done.
+				   Allow I/O bufferring (efficiency), if just one pass is needed. */
+				if ( npasses > 1 ) {
+					nv->dev->d_ops->sync (nv->dev);
+				}
+			}
+
+		}
+		/* Wiping file name length */
+		for ( pass = 0; pass < npasses; pass++ )
+		{
+
+			fill_buffer ( pass, (unsigned char *) ctx->attr->value_length, sizeof(u32),
+				selected );
+
+			if ( !opts.noaction ) {
+				if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+						1LL, ctx->mrec) != 0 )
+				{
+					ret_wfs = -5;
+					break;
+				}
+
+				/* Flush after each writing, if more than 1 overwriting needs to be done.
+				   Allow I/O bufferring (efficiency), if just one pass is needed. */
+				if ( npasses > 1 ) {
+					nv->dev->d_ops->sync (nv->dev);
+				}
+			}
+		}
+		ctx->attr->value_length = 0;
+		if ( !opts.noaction ) {
+			if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+					1LL, ctx->mrec) != 0 )
+			{
+				ret_wfs = -5;
+				break;
+			}
+		}
+	}
+
+	ntfs_attr_reinit_search_ctx (ctx);
+
+	/* Wiping file data */
+	while ( 1 == 1 )
+	{
+
+        	if (ntfs_attr_lookup (NTFS_AT_DATA, NULL, 0, 0, 0LL, NULL, 0, ctx) != 0)
+        	{
+			break;	/* None / no more of that type */
+		}
+		if ( ctx->attr == NULL ) break;
+
+		if (ctx->attr->non_resident == 0)
+		{	/* attribute is resident (part of MFT record) */
+
+			/* find the offset of the data, including the MFT record */
+			a_offset = ((u32) ctx->attr + le16_to_cpu (ctx->attr->value_offset) );
+
+			/* Wiping the data itself */
+			for ( pass = 0; pass < npasses; pass++ )
+			{
+
+				fill_buffer ( pass, (unsigned char *) a_offset, ctx->attr->value_length,
+					selected );
+
+				if ( !opts.noaction ) {
+					if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+							1LL, ctx->mrec) != 0 )
+					{
+						ret_wfs = -5;
+						break;
+					}
+
+					/* Flush after each writing, if more than 1 overwriting needs to be done.
+					   Allow I/O bufferring (efficiency), if just one pass is needed. */
+					if ( npasses > 1 ) {
+						nv->dev->d_ops->sync (nv->dev);
+					}
+				}
+			}
+			/* Wiping data length */
+			for ( pass = 0; pass < npasses; pass++ )
+			{
+
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->value_length),
+					sizeof(u32), selected );
+
+				if ( !opts.noaction ) {
+					if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+							1LL, ctx->mrec) != 0 )
+					{
+						ret_wfs = -5;
+						break;
+					}
+
+					/* Flush after each writing, if more than 1 overwriting needs to be done.
+					   Allow I/O bufferring (efficiency), if just one pass is needed. */
+					if ( npasses > 1 ) {
+						nv->dev->d_ops->sync (nv->dev);
+					}
+				}
+			}
+			ctx->attr->value_length = 0;
+			if ( !opts.noaction ) {
+				if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+						1LL, ctx->mrec) != 0 )
+				{
+					ret_wfs = -5;
+					break;
+				}
+			}
+		}
+		else
+		{	/* Non-resident here */
+
+			rl = ntfs_mapping_pairs_decompress (nv, ctx->attr, NULL);
+			if (rl == NULL)
+			{
+				continue;
+			}
+
+			if (rl[0].length <= 0)
+			{
+				continue;
+			}
+
+			for (i = 0; (rl[i].length > 0) && (ret_wfs == 0); i++)
+			{
+
+				for (j = rl[i].lcn; (j < rl[i].lcn + rl[i].length) && (ret_wfs == 0); j++)
+				{
+
+					if (utils_cluster_in_use (nv, j) == 0 )
+					{
+						for ( pass = 0; pass < npasses; pass++ )
+						{
+
+							fill_buffer ( pass, buf,
+								(size_t) nv->cluster_size, selected );
+							if ( !opts.noaction ) {
+								if (ntfs_cluster_write (nv, j, 1LL, buf) < 1)
+								{
+									ret_wfs = -5;
+									break;
+								}
+
+								/* Flush after each writing, if more than 1 overwriting needs to be done.
+								   Allow I/O bufferring (efficiency), if just one pass is needed. */
+								if ( npasses > 1 ) {
+									nv->dev->d_ops->sync (nv->dev);
+								}
+							}
+						}
+					}
+				}
+			}
+			/* Wipe the data length here */
+			for ( pass = 0; pass < npasses; pass++ )
+			{
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->lowest_vcn),
+					sizeof(NTFS_VCN), selected );
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->highest_vcn),
+					sizeof(NTFS_VCN), selected );
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->allocated_size),
+					sizeof(s64), selected );
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->data_size),
+					sizeof(s64), selected );
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->initialized_size),
+					sizeof(s64), selected );
+				fill_buffer ( pass, (unsigned char *) &(ctx->attr->compressed_size),
+					sizeof(s64), selected );
+
+				if ( !opts.noaction ) {
+					if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+							1LL, ctx->mrec) != 0 )
+					{
+						ret_wfs = -5;
+						break;
+					}
+
+					/* Flush after each writing, if more than 1 overwriting needs to be done.
+					   Allow I/O bufferring (efficiency), if just one pass is needed. */
+					if ( npasses > 1 ) {
+						nv->dev->d_ops->sync (nv->dev);
+					}
+				}
+			}
+			ctx->attr->lowest_vcn = 0;
+			ctx->attr->highest_vcn = 0;
+			ctx->attr->allocated_size = 0;
+			ctx->attr->data_size = 0;
+			ctx->attr->initialized_size = 0;
+			ctx->attr->compressed_size = 0;
+			if ( !opts.noaction ) {
+				if ( ntfs_mft_records_write (nv, NTFS_MK_MREF (record, 0),
+						1LL, ctx->mrec) != 0 )
+				{
+					ret_wfs = -5;
+					break;
+				}
+			}
+		}	/* end of resident check */
+	} /* end of 'wiping file data' loop */
+
+	ntfs_attr_put_search_ctx (ctx);
+	free_file (file);
+
+	return ret_wfs;
+}
+
+/**
+ * Starts search for deleted inodes and undelete data on the given NTFS filesystem.
+ * \param FS The filesystem.
+ * \return 0 in case of no errors, other values otherwise.
+ */
+static int wipe_unrm(ntfs_volume *nv)
+{
+	int ret_wfs = 0, ret;
+	ntfs_attr *bitmapattr = NULL;
+	s64 bmpsize, size, nr_mft_records, i, j, k;
+	unsigned char b;
+	unsigned char * buf = NULL;
+
+#define MYBUF_SIZE 8192
+	unsigned char *mybuf;
+#define MINIM(x, y) ( ((x)<(y))?(x):(y) )
+
+	mybuf = (unsigned char *) malloc (MYBUF_SIZE);
+	if (mybuf == NULL)
+	{
+		return -1;
+	}
+
+	buf = (unsigned char *) malloc (nv->cluster_size);
+	if (buf == NULL)
+	{
+		free (mybuf);
+		return -1;
+	}
+
+	bitmapattr = ntfs_attr_open (nv->mft_ni, NTFS_AT_BITMAP, NTFS_AT_UNNAMED, 0);
+	if (bitmapattr == NULL)
+	{
+		free (buf);
+		free (mybuf);
+		return -2;
+	}
+	bmpsize = bitmapattr->initialized_size;
+
+	nr_mft_records = nv->mft_na->initialized_size >> nv->mft_record_size_bits;
+
+	/* just like ntfsundelete; detects i-node numbers fine */
+	for (i = 0; (i < bmpsize) && (ret_wfs==0); i += MYBUF_SIZE)
+	{
+
+		/* read a part of the file bitmap */
+		size = ntfs_attr_pread (bitmapattr, i, MINIM ((bmpsize - i), MYBUF_SIZE), mybuf);
+		if (size < 0) break;
+
+		/* parse each byte of the just-read part of the bitmap */
+		for (j = 0; (j < size) && (ret_wfs==0); j++)
+		{
+			b = mybuf[j];
+			/* parse each bit of the byte Bit 1 means 'in use'. */
+			for (k = 0; (k < CHAR_BIT) && (ret_wfs==0); k++, b>>=1)
+			{
+				/* (i+j)*8+k is the i-node bit number */
+				if (((i+j)*CHAR_BIT+k) >= nr_mft_records)
+				{
+					goto done;
+				}
+				if ((b & 1) != 0)
+				{
+					continue;	/* i-node is in use, skip it */
+				}
+				/* wiping the i-node here: */
+				ret = destroy_record (nv, (i+j)*CHAR_BIT+k, buf);
+				if ( ret != 0 )
+				{
+					ret_wfs = ret;
+				}
+			}
+		}
+	}
+done:
+	ntfs_attr_close (bitmapattr);
+	free (buf);
+	free (mybuf);
+
+	ntfs_log_quiet("wipe_undelete\n");
+	return ret_wfs;
+}
+
+
+
+/**
  * print_summary - Tell the user what we are about to do
  *
  * List the operations about to be performed.  The output will be silenced by
@@ -1350,6 +1956,8 @@
 		ntfs_log_quiet("\tthe logfile (journal)\n");
 	if (opts.pagefile)
 		ntfs_log_quiet("\tthe pagefile (swap space)\n");
+	if (opts.undel)
+		ntfs_log_quiet("\tundelete data\n");

 	ntfs_log_quiet("\n%s will overwrite these areas with: ", EXEC_NAME);
 	if (opts.bytes) {
@@ -1416,6 +2024,10 @@
 		sleep(5);
 	}

+	for (i = 0; opts.bytes[i] >= 0; i++)
+	{
+		npasses = i-1;
+	}
 	ntfs_log_info("\n");
 	for (i = 0; i < opts.count; i++) {
 		int byte;
@@ -1472,11 +2084,21 @@
 					total += wiped;
 			}

+			if (opts.undel) {
+				wiped = wipe_unrm(vol);
+				if (wiped != 0)
+					goto umount;
+				/*
+				else
+					total += wiped;
+				*/
+			}
+
 			if (act == act_info)
 				break;
 		}

-		ntfs_log_info("%lld bytes were wiped\n", (long long)total);
+		ntfs_log_info("%lld bytes were wiped (excluding undelete data)\n", (long long)total);
 	}
 	result = 0;
 umount:
diff -uaN ../ntfsprogs-2.0.0/ntfsprogs/ntfswipe.h ./ntfsprogs/ntfswipe.h
--- ../ntfsprogs-2.0.0/ntfsprogs/ntfswipe.h	2007-10-07 13:12:04.000000000 +0200
+++ ./ntfsprogs/ntfswipe.h	2007-10-11 18:55:20.000000000 +0200
@@ -47,6 +47,7 @@
 	int	 pagefile;	/* Wipe pagefile (swap space) */
 	int	 tails;		/* Wipe file tails */
 	int	 unused;	/* Wipe unused clusters */
+	int	 undel;		/* Wipe undelete data */
 };

 #endif /* _NTFSWIPE_H_ */
