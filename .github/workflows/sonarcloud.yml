# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master", dev, main ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      COVERAGE_DIR: coverage-dir

    steps:
     # Checkout project source
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install requirements
        run: sudo apt-get -y --ignore-missing install
          libext2fs-dev
          ntfs-3g-dev
          xfsprogs 
          libreiser4-dev reiser4progs
          libhfsp-dev hfsutils hfsprogs
          ocfs2-tools-dev 
          reiserfsprogs libreiserfscore-dev
          check
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3
      - name: Configure
        run: |
          #autoreconf --install
          touch aclocal.m4 Makefile.in src/Makefile.in doc/Makefile.in test/Makefile.in config.h.in
          for i in po/*.po; do touch ${i/.po/.gmo}; done
          sleep 1
          touch configure
          ./configure
          sleep 1
          touch doc/wipefreespace.info
          sleep 1
      - name: Show user and devices
        run: |
          ls -l /dev/loop*
          whoami
          groups
      - name: Prepare test data
        run: |
          cd test
          ./mktestfs.sh
      - name: Run build-wrapper
        run: |
          sudo build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} make CFLAGS='-O0 -g -Wall -Wno-nonnull-compare -fprofile-arcs -ftest-coverage -fprofile-abs-path --coverage' all check || cat test/test-suite.log
      - name: Gather coverage information
        run: |
          sudo chmod -R o+rX .
          mkdir ${{ env.COVERAGE_DIR }}
          cd ${{ env.COVERAGE_DIR }}
          find .. -name '*.o' | xargs gcov --preserve-paths
          cd ..
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Put the name of your token here
        run: |
          sonar-scanner --define sonar.projectKey=bogdro_wipefreespace --define sonar.organization=bogdro --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" --define sonar.cfamily.gcov.reportsPath="${{ env.COVERAGE_DIR }}"
      
      #- name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      #  uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
      #  with:
          # Additional arguments for the sonarcloud scanner
      #    args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
      #      -Dsonar.projectKey=bogdro_wipefreespace
      #      -Dsonar.organization=bogdro
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources=src # optional, default is project base directory
            # When you need the analysis to take place in a directory other than the one from which it was launched
            #-Dsonar.projectBaseDir= # optional, default is .
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests=test # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
